MAIN CODE...........
THIS FILE IS THE PERFECTLY WORKING CODE for videocall
<*************************************************************************************************************>

room.ejs:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Videocall</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="style.css">

    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/1.3.1/peerjs.min.js.map"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const ROOM_ID = "<%= roomId %>";
    </script>
</head>
<body>
    <audio id="chatAudio" src="chat_request.mp3"></audio>
    <div class="overlay" onclick="hideInvitePopup()" style="display: none;"></div>
    
    <div class="invitePop" id="invitePopup">
        <input type="text" value="Room Link..." id="roomLink" readonly>
        <button onclick="copyToClipboard()">Copy</button>
    </div>

    <div class="main">
        <div class="main__left">
            <div class="main__videos">
                <div id="video-grid"></div>
            </div>
            <div class="main__controls">
                <div class="main__controls_block">
                    <div class="main__controls_button" id="muteButton" onclick="muteUnmute()">
                        <i class="fa fa-microphone"></i>
                        <span>Mute</span>
                    </div>
                    <div class="main__controls_button" id="playPauseVideo" onclick="playStop()">
                        <i class="fa fa-video-camera"></i>
                        <span>Pause Video</span>
                    </div>
                </div>

                <div class="main__controls_block">
                    <div class="main__controls_button" id="chat__Btn" onclick="ShowChat(this)">
                        <i class="fa fa-comment"></i>
                        <span>Chat</span>
                    </div>
                    <div class="main__controls_button" id="notification__Btn" onclick="ShowNotifications()">
                        <i class="fa fa-bell"></i>
                        <span>Notifications</span>
                    </div>
                    <div class="main__controls_button" onclick="showInvitePopup()">
                        <i class="fa fa-user-plus"></i>
                        <span>Invite People</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="main__right">
            <div class="main__chat">
                <div id="main__chat__window">
                    <ul id="all_messages"></ul>
                </div>
                <input type="text" id="chat_message" placeholder="Type a message...">
                <button class="sendMsg" id="sendMsg">
                    <i class="fa fa-paper-plane"></i>
                </button>
            </div>
        </div>
        
        <div class="notification-section" id="notificationSection">
            <h4>Notifications</h4>
            <ul id="notificationList"></ul>
        </div>
    </div>
    <script src="script.js"></script>
</body>
</html>



<*************************************************************************************************************>

style.css 
@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
html, body {
    height: 100%;
    font-family: "Roboto", sans-serif;
    overflow: hidden; 
}
#video-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr); 
    height: 100%; 
    overflow-y: auto; 
    padding: 10px; 
    max-height: 400px; 
    position: relative; 
}
video {
    width: 120%; 
    height: 320px; 
    object-fit:cover; 
    border: 5px solid #000;
    min-width: 300px; 
    min-height: 270px; 
    position: relative;
}
.main {
    height: 100%;
    display: flex;
}
.main__left {
    flex: 1;
    display: flex;
    flex-direction: column;
}
.main__right {
    flex: 0.2;
    display: flex;
    flex-direction: column;
    background-color: #242324;
    border-left: 1px solid #3d3d42;
    display: none;
}
.showChat .main__right {
    display: flex;
}
.showChat .main__left {
    flex: 0.8;
}
.main__videos {
    flex-grow: 1;
    background-color: #000;
    display: flex;
    align-items: center;
    justify-content: center;
}
.main__controls {
    display: flex;
    background-color: #1c1e20;
    color: #d2d2d2;
    padding: 5px;
    justify-content: space-between;
}
.main__controls_block {
    display: flex;
    gap: 5px;
}
.main__controls_button {
    display: flex;
    flex-direction: column;
    cursor: pointer;
    padding: 10px;
    justify-content: center;
    background-color: #1c1e20;
    border-radius: 5px;
    transition: background-color 0.3s ease, transform 0.3s ease;
    
}

.main__controls_button i {
    margin-bottom: 5px;
    font-size: 18px;
}

.main__controls_button span {
    font-size: 12px;
}

.main__controls_button:hover {
    background-color: #2b2f31;
    transform: scale(1.05);
}

.main__controls_button:active {
    transform: scale(0.95);
}

#muteButton:hover, #playPauseVideo:hover, #chat__Btn:hover {
    background-color: #ff6347;
}

.invitePop {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 20px;
    background-color: #242324;
    border: 1px solid #3d3d42;
    display: none; 
    z-index: 1000;
    border-radius: 10px;
}

.invitePop input {
    width: 250px;
    padding: 10px;
    margin-right: 10px;
    background-color: #1c1e20;
    color: #fff;
    border: 1px solid #3d3d42;
    outline: none;
    border-radius: 5px;
}

.invitePop button {
    padding: 10px 20px;
    background-color: #1e90ff;
    color: #fff;
    border: none;
    cursor: pointer;
    border-radius: 5px;
    transition: background-color 0.3s ease;
}

.invitePop button:hover {
    background-color: #007acc;
}

.overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    z-index: 999;
}

i {
    text-align: center;
}

#main__chat__window {
    position: relative;
    flex: 1;
    overflow-y: auto; 
    padding: 10px;
    background-color: #f1f1f1;
    border-radius: 5px;
    height: calc(100vh - 120px); 
}

#main__chat__window::-webkit-scrollbar {
    width: 10px;
}

#main__chat__window::-webkit-scrollbar-thumb {
    background-color: rgb(184, 184, 184);
    border-radius: 5px;
}

#all_messages {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

#all_messages li {
    margin-bottom: 10px;
}

#all_messages .otherUser {
    background-color: #cfcfcf;
    padding: 8px;
    border-radius: 8px;
}

#chat_message {
    width: 100%;
    border-radius: 5px;
    padding: 10px;
    border: 1px solid #ccc;
    font-size: 16px;
    margin-bottom: 10px;
}


#sendMsg {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 15px;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
}

#sendMsg:hover {
    background-color: #0056b3;
}

#chat__Btn.active {
    background-color: #007bff;
}

#chat__Btn.active:hover {
    background-color: #0056b3;
}

/* Existing styles untouched */

/* Notification Section Styles */
.notification-section {
    position: absolute; /* Similar to chat section */
    top: 0;
    right: 0;
    width: 250px;
    background-color: #242324;
    color: #fff;
    overflow-y: auto;
    border-left: 1px solid #3d3d42;
    display: none; /* Hidden by default */
    z-index: 10;
    height: calc(100vh - 120px); /* Same height as chat section */
    padding: 10px;
}

.notification-section.show {
    display: block; /* Show the notification section when active */
}

/* Notification Section Heading */
.notification-section h4 {
    text-align: center;
    padding: 10px 0;
    margin: 0;
    border-bottom: 1px solid #3d3d42;
    background-color: #1c1e20;
    font-size: 16px;
}

/* List of Notifications */
.notification-section ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.notification-section ul li {
    background-color: #333;
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 5px;
    font-size: 14px;
    word-wrap: break-word;
}

.notification-section ul li:nth-child(even) {
    background-color: #3d3d42;
}

/* Notification Button Style */
#notification__Btn.active {
    background-color: #007bff;
}

#notification__Btn.active:hover {
    background-color: #0056b3;
}

/*testing*/
.video-container {
    display: inline-block;
    text-align: center;
    margin: 5px;
    vertical-align: top;
    position: relative;
}

.user-id-label {
    margin-top: 5px;
    font-size: 14px;
    color: white;
}






<*************************************************************************************************************>

script.js:
const socket = io("/"); 
const chatInputBox = document.getElementById("chat_message");
const all_messages = document.getElementById("all_messages");
const leave_meeting = document.getElementById("leave-meeting");
const main__chat__window = document.getElementById("main__chat__window"),
    videoGrid = document.getElementById("video-grid"),
    myVideo = document.createElement("video");
myVideo.muted = true;

var peer = new Peer({
    config: {
        iceServers: [
            {
                url: "turn:numb.viagenie.ca",
                credential: "muazkh",
                username: "webrtc@live.com",
            },
            {
                url: "turn:192.158.29.39:3478?transport=udp",
                credential: "JZEOEt2V3Qb0y27GRntt2u2PAYA=",
                username: "28224511:1379330808",
            },
            {
                url: "turn:turn.bistri.com:80",
                credential: "homeo",
                username: "homeo",
            },
            {
                url: "turn:turn.anyfirewall.com:443?transport=tcp",
                credential: "webrtc",
                username: "webrtc",
            },
            {
                url: ["turn:13.250.13.83:3478?transport=udp"],
                username: "YzYNCouZM1mhqhmseWk6",
                credential: "YzYNCouZM1mhqhmseWk6",
            },
        ],
    },
});

let myVideoStream;
let currentUserId;
let pendingMsg = 0;
let peers = {};
var getUserMedia =
    navigator.getUserMedia ||
    navigator.webkitGetUserMedia ||
    navigator.mozGetUserMedia;

navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then((stream) => {
    myVideoStream = stream;
    addVideoStream(myVideo, stream, "me");

    peer.on("call", (call) => {
        call.answer(stream);

        const video = document.createElement("video");
        call.on("stream", (userVideoStream) => {
            const userId = call.peer; // Peer ID corresponds to the user ID
            addVideoStream(video, userVideoStream, userId);
        });
    });

    socket.on("user-connected", (userId) => {
        connectToNewUser(userId, stream);
    });

    socket.on("user-disconnected", (userId) => {
        if (peers[userId]) peers[userId].close();
        speakText(`User ${userId} left`);
    });

    document.addEventListener("keydown", (e) => {
        if (e.which === 13 && chatInputBox.value != "") {
            socket.emit("message", chatInputBox.value);
            chatInputBox.value = "";
        }
    });

    document.getElementById("sendMsg").addEventListener("click", () => {
        if (chatInputBox.value != "") {
            socket.emit("message", chatInputBox.value);
            chatInputBox.value = "";
        }
    });

    chatInputBox.addEventListener("focus", () => {
        document.getElementById("chat__Btn").classList.remove("has__new");
        pendingMsg = 0;
        document.getElementById("chat__Btn").children[1].innerHTML = `Chat`;
    });

    // Display messages received from the server
    socket.on("createMessage", (message) => {
        let li = document.createElement("li");
        if (message.user !== currentUserId) {
            li.classList.add("otherUser");
            li.innerHTML = `<div><b>User (${message.user}): </b>${message.msg}</div>`;
        } else {
            li.innerHTML = `<div><b>Me:</b> ${message.msg}</div>`;
        }

        all_messages.append(li);
        main__chat__window.scrollTop = main__chat__window.scrollHeight;

        if (message.user !== currentUserId) {
            pendingMsg++;
            playChatSound();
            document.getElementById("chat__Btn").classList.add("has__new");
            document.getElementById("chat__Btn").children[1].innerHTML = `Chat (${pendingMsg})`;
        }
    });
});

peer.on("open", (id) => {
    currentUserId = id;
    socket.emit("join-room", ROOM_ID, id);
    socket.emit("user-action", { action: "join", userId: currentUserId }); // Notify server
    updateUserStatus (userId, action);
});

socket.on("disconnect", () => {
    socket.emit("leave-room", ROOM_ID, currentUserId);
    socket.emit("user-action", { action: "leave", userId: currentUserId }); // Notify server
    updateUserStatus(userId, action);
});

const connectToNewUser = (userId, stream) => {
    const call = peer.call(userId, stream);
    const video = document.createElement("video");

    call.on("stream", (userVideoStream) => {
        addVideoStream(video, userVideoStream, userId);
    });

    call.on("close", () => {
        const userContainer = document.getElementById(`container-${userId}`);
        if (userContainer) userContainer.remove();
        delete activeUsers[userId];
        updateVideoLayout();
    });

    peers[userId] = call;
};

const playStop = () => {
    let enabled = myVideoStream.getVideoTracks()[0].enabled;
    if (enabled) {
        myVideoStream.getVideoTracks()[0].enabled = false;
        setPlayVideo();
        socket.emit("user-action", { action: "pause-video", userId: currentUserId }); // Notify server
        updateUserStatus(currentUserId, "pause-video");
    } else {
        setStopVideo();
        myVideoStream.getVideoTracks()[0].enabled = true;
        socket.emit("user-action", { action: "play-video", userId: currentUserId }); // Notify server
        updateUserStatus(currentUserId, "play-video");
    }
};

const muteUnmute = () => {
    const enabled = myVideoStream.getAudioTracks()[0].enabled;
    if (enabled) {
        myVideoStream.getAudioTracks()[0].enabled = false;
        setUnmuteButton();
        socket.emit("user-action", { action: "mute", userId: currentUserId }); // Notify server
        updateUserStatus(currentUserId, "mute");
    } else {
        myVideoStream.getAudioTracks()[0].enabled = true;
        setMuteButton();
        socket.emit("user-action", { action: "unmute", userId: currentUserId }); // Notify server
        updateUserStatus(currentUserId, "unmute");
    }
};

const activeUsers = {}; // To store active users and their corresponding containers

const addVideoStream = (videoE1, stream, uId = "") => {
    // Check if a container for this user already exists
    let existingContainer = document.getElementById(`container-${uId}`);
    if (!existingContainer) {
        // Create a new container for the video and user ID
        const videoContainer = document.createElement("div");
        videoContainer.classList.add("video-container");
        videoContainer.id = `container-${uId}`;

        const userIdLabel = document.createElement("p");
        userIdLabel.classList.add("user-id-label");
        userIdLabel.innerText = uId ? `${uId}` : "Me";

        videoContainer.append(videoE1, userIdLabel);
        videoGrid.append(videoContainer);
    }

    // Ensure the video element is added and stream is set
    videoE1.srcObject = stream;
    videoE1.id = uId;
    videoE1.addEventListener("loadedmetadata", () => {
        videoE1.play();
    });

    activeUsers[uId] = stream; // Save the stream for this user
    updateVideoLayout();
};

const updateVideoLayout = () => {
    let totalUsers = Object.keys(activeUsers).length;
    const videoContainers = document.getElementsByClassName("video-container");
    for (let index = 0; index < videoContainers.length; index++) {
        videoContainers[index].style.width = 100 / totalUsers + "%";
    }
};

const setStopVideo = () => {
    const html = `<i class="fa fa-video"></i>
    <span>Pause Video</span>`;
    document.getElementById("playPauseVideo").innerHTML = html;
};

const setPlayVideo = () => {
    const html = `<i class="fa fa-video-slash"></i>
    <span>Play Video</span>`;
    document.getElementById("playPauseVideo").innerHTML = html;
};

const setUnmuteButton = () => {
    const html = `<i class="fa fa-microphone-slash"></i><span class="unmute">Unmute</span>`;
    document.getElementById("muteButton").innerHTML = html;
};

const setMuteButton = () => {
    const html = `<i class="fa fa-microphone"></i><span>Mute</span>`;
    document.getElementById("muteButton").innerHTML = html;
};

const ShowChat = (e) => {
    e.classList.toggle("active");
    document.body.classList.toggle("showChat");
};

const showInvitePopup = () => {
    const roomLink = `${window.location.origin}/${ROOM_ID}`;
    document.getElementById("roomLink").value = roomLink;
    document.querySelector('.invitePop').style.display = 'block';
    document.querySelector('.overlay').style.display = 'block';
};

const hideInvitePopup = () => {
    document.querySelector('.invitePop').style.display = 'none';
    document.querySelector('.overlay').style.display = 'none';
};

const copyToClipboard = () => {
    var copyText = document.getElementById("roomLink");
    copyText.select();
    copyText.setSelectionRange(0, 99999);
    document.execCommand("copy");
    alert("Room ID has been copied to clipboard!");
    hideInvitePopup();
};

const playChatSound = () => {
    const chatAudio = document.getElementById("chatAudio");
    chatAudio.play();
};

const speakText = (msgTxt) => {
    const audio = new SpeechSynthesisUtterance();
    audio.text = msgTxt;
    window.speechSynthesis.speak(audio);
};



// Notification Section
const notificationSection = document.getElementById('notificationSection');
const notificationList = document.getElementById('notificationList');

// Handle the notifications section visibility toggle
const toggleNotifications = () => {
    const notificationSection = document.querySelector('.notification-section');
    notificationSection.classList.toggle('show'); // Toggles visibility using the 'show' class
    document.body.classList.toggle('showNotifications'); // Optional: For any additional layout changes
};

document.getElementById('notification__Btn').addEventListener('click', toggleNotifications);

// Handle UI update for user action (mute/unmute, play/pause video)
const updateUserStatus = (userId, action) => {
    let notificationText = '';

    switch(action) {
        case 'join':
            notificationText = `User ${userId} joined the call.`;
            break;
        case 'leave':
            notificationText = `User ${userId} left the call.`;
            break;
        case 'mute':
            notificationText = `User ${userId} muted their microphone.`;
            break;
        case 'unmute':
            notificationText = `User ${userId} unmuted their microphone.`;
            break;
        case 'pause-video':
            notificationText = `User ${userId} paused their video.`;
            break;
        case 'play-video':
            notificationText = `User ${userId} resumed their video.`;
            break;
    }

    // Check if a similar notification is already there (optional)
    if (!document.querySelector(`#notification-${userId}-${action}`)) {
        let notification = document.createElement("div");
        notification.classList.add("notification");
        notification.id = `notification-${userId}-${action}`; // Unique ID for each notification
        notification.textContent = notificationText;
        document.getElementById('notificationList').appendChild(notification);
    }
};

// Client-side socket event listener
socket.on("user-action-notification", (data) => {
    const { action, userId } = data;
    console.log(`Notification received: User ${userId} performed action: ${action}`);
    updateUserStatus(userId, action);
});





<*************************************************************************************************************>
server.js:
const express = require("express");
const app = express();
const server = require("http").Server(app);
const { v4: uuidv4 } = require("uuid");
const io = require("socket.io")(server);

const { ExpressPeerServer } = require("peer");
const peerServer = ExpressPeerServer(server, {
    debug: true,
});

app.set("view engine", "ejs");
app.use(express.static("public"));
app.use("/peerjs", peerServer);

app.get("/", (req, rsp) => {
    rsp.redirect(`/${uuidv4()}`);
});

app.get("/:room", (req, rsp) => {
    rsp.render("room", { roomId: req.params.room });
});

io.on("connection", (socket) => {
    let currentUserId;
    let roomId;

    // User joins the room
    socket.on("join-room", (room, userId) => {
        currentUserId = userId;
        roomId = room;
        socket.join(roomId);

        console.log(`User ${userId} joined room ${roomId}`);
        socket.broadcast.to(roomId).emit("user-connected", userId);
    });

    // Handle user actions like mute/unmute and pause/resume video
    socket.on("user-action", (data) => {
        const { action, userId } = data;
        console.log(`User ${userId} performed action: ${action}`);
    
        // Ensure event is only emitted once
        io.to(roomId).emit("user-action-notification", { action, userId });
    });
    

    // Handle incoming chat messages
    socket.on("message", (message) => {
        io.to(roomId).emit("createMessage", { msg: message, user: currentUserId });
    });

    // Handle when a user disconnects
    socket.on("disconnect", () => {
        console.log(`User ${currentUserId} disconnected`);
    
        // Notify other users in the room
        socket.broadcast.to(roomId).emit("user-disconnected", currentUserId);
        socket.broadcast.to(roomId).emit("user-action-notification", { action: "leave", userId: currentUserId });
});

});

server.listen(process.env.PORT || 3030, () => {
    console.log("Server is running on port", process.env.PORT || 3030);
});

